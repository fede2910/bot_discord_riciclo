import discord
from discord.ext import commands
import requests

intents = discord.Intents.default()
intents.message_content = True  # Questo è necessario per leggere i messaggi!

bot = commands.Bot(command_prefix="/", intents=intents)

import os
import random

@bot.event
async def on_ready():
    print(f"Bot connesso come {bot.user}")

@bot.command()
async def mem(ctx):
    # Ottieni la lista dei file nella cartella "images"
    file_list = os.listdir('images')

    # Filtra solo i file immagine (opzionale, se necessario)
    image_files = [file for file in file_list if file.endswith(('.png', '.jpg', '.jpeg', '.gif'))]

    # Scegli un'immagine casuale
    img_number = random.randint(0, 14)
    if img_number <= 4:
        img_name = 'mem_fede.jpg'
    elif img_number <= 6:
        img_name = 'meme1.png'
    elif img_number <= 9:
        img_name = 'meme2.png'
    elif img_number <= 14:
        img_name = 'meme3.png'

    print(f"Immagine scelta: {img_name}")
    with open(f'images/{img_name}', 'rb') as f:
        picture = discord.File(f)
    await ctx.send(file=picture)

def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']


@bot.command('duck')
async def duck(ctx):
    '''Una volta chiamato il comando duck, il programma richiama la funzione get_duck_image_url'''
    image_url = get_duck_image_url()
    await ctx.send(image_url)

@bot.command()
async def riciclo(ctx):
    # Chiede all'utente il simbolo del prodotto
    await ctx.send("Che simbolo c'è sul tuo prodotto? (Inserisci un numero)")

    try:
        # Attende la risposta dell'utente
        msg = await bot.wait_for(
            "message", 
            timeout=30.0,  # Timeout di 30 secondi
            check=lambda m: m.author == ctx.author and m.channel == ctx.channel
        )
        simbolo = int(msg.content)  # Converte il messaggio in un intero

        # Risponde in base al simbolo
        if simbolo == 20:
            await ctx.send("CARTONE ONDULATO")
        elif simbolo == 21:
            await ctx.send("CARTONE NON ONDULATO")
        elif simbolo == 22:
            await ctx.send("CARTA SEMPLICE")
        elif simbolo == 81:
            await ctx.send("POLIACCOPPIATO/CARTA, PLASTICA")
        elif simbolo == 1:
            await ctx.send("POLIETILENE TEREFTALATO")
        elif simbolo == 2:
            await ctx.send("POLIETILENE ALTA DENSITA'")
        elif simbolo == 3:
            await ctx.send("CLORURO DI VINILE O POLIVINILE")
        elif simbolo == 4:
            await ctx.send("POLIETILENE BASSA DENSITA'")
        elif simbolo == 5:
            await ctx.send("POLIPROPILENE")
        elif simbolo == 6:
            await ctx.send("POLISTIRENE O POLISTIROLO")
        elif simbolo == 7:
            await ctx.send("ALTRA PLASTICA")
        elif simbolo == 70:
            await ctx.send("VETRO TRASPARENTE")
        elif simbolo == 71:
            await ctx.send("VETRO VERDE")
        elif simbolo == 72:
            await ctx.send("VETRO MARRONE")
        elif simbolo == 41:
            await ctx.send("ALLUMINIO")
        elif simbolo == 32:
            await ctx.send("ACCIAIO")
        elif simbolo <= 79 and simbolo >= 73:
            await ctx.send("VETRO NON RICICLABILE")
        elif simbolo <= 40 and simbolo >= 23:
            await ctx.send("MATERIALE NON RICICLABILE")
        else:
            await ctx.send("Simbolo CA: CARTONE POLIACCOPPIATO")
    except ValueError:
        await ctx.send("Per favore, inserisci un numero valido.")
    except TimeoutError:
        await ctx.send("Tempo scaduto! Riprova a usare il comando.")

bot.run('TOKEN')
